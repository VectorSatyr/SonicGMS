<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>GamePlayer</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
state = "following";
target = noone;

memory_size = 16;

memory_input_up = ds_queue_create();
memory_input_down = ds_queue_create();
memory_input_left = ds_queue_create();
memory_input_right = ds_queue_create();
memory_input_action = ds_queue_create();
memory_horizontal_axis = ds_queue_create();

repeat (memory_size) {
    ds_queue_enqueue(memory_input_up, false);
    ds_queue_enqueue(memory_input_down, false);
    ds_queue_enqueue(memory_input_left, false);
    ds_queue_enqueue(memory_input_right, false);
    ds_queue_enqueue(memory_input_action, false);
    ds_queue_enqueue(memory_horizontal_axis, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup
ds_queue_destroy(memory_input_up);
ds_queue_destroy(memory_input_down);
ds_queue_destroy(memory_input_left);
ds_queue_destroy(memory_input_right);
ds_queue_destroy(memory_input_action);
ds_queue_destroy(memory_horizontal_axis);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Follow
if (game_is_running()) {
    var up = ds_queue_dequeue(memory_input_up);
    var down = ds_queue_dequeue(memory_input_down);
    var left = ds_queue_dequeue(memory_input_left);
    var right = ds_queue_dequeue(memory_input_right);
    var action = ds_queue_dequeue(memory_input_action);
    var horizontal_axis = ds_queue_dequeue(memory_horizontal_axis);

    if (instance_exists(target)) {
        ds_queue_enqueue(memory_input_up, target.input_up);
        ds_queue_enqueue(memory_input_down, target.input_down);
        ds_queue_enqueue(memory_input_left, target.input_left);
        ds_queue_enqueue(memory_input_right, target.input_right);
        ds_queue_enqueue(memory_input_action, target.input_action);
        ds_queue_enqueue(memory_horizontal_axis, target.horizontal_axis_value);
    } else {
        ds_queue_enqueue(memory_input_up, 0);
        ds_queue_enqueue(memory_input_down, 0);
        ds_queue_enqueue(memory_input_left, 0);
        ds_queue_enqueue(memory_input_right, 0);
        ds_queue_enqueue(memory_input_action, 0);
        ds_queue_enqueue(memory_horizontal_axis, 0);
    }

    switch (state) {
    case "normal":
        with (character) {
            input_up_pressed = (up and not input_up);
            input_down_pressed = (down and not input_down);
            input_left_pressed = (left and not input_left);
            input_right_pressed = (right and not input_right);
            input_action_pressed = (action and not input_action);
    
            input_up = up;
            input_down = down;
            input_left = left;
            input_right = right;
            input_action = action;
            
            horizontal_axis_value = horizontal_axis;
        }
        break;
    
    case "following":
        if (instance_exists(target)) {
            if ((character.x &lt; target.x - 10 or 
                (target.y &lt; character.y - 50 and target.on_the_ground and target.x_speed &gt; 0)) and 
                (target.y &gt;= character.y - 50 or not target.on_the_ground or target.x_speed &gt;= 0)) {
                character.input_right = true;
                if (not character.input_left) {
                    character.horizontal_axis_value = 1;
                }
            } else {
                character.input_right = false;
                if (not character.input_left) {
                    character.horizontal_axis_value = 0;
                }
            }
    
            if ((character.x &gt; target.x + 10 or 
                (target.y &lt; character.y - 50 and target.on_the_ground and target.x_speed &lt; 0)) and 
                (target.y &gt;= character.y - 50 or not target.on_the_ground or target.x_speed &lt;= 0)) {
                character.input_left = true;
                if (not character.input_right) {
                    character.horizontal_axis_value = -1;
                }
            } else {
                character.input_left = false;
                if (not character.input_right) {
                    character.horizontal_axis_value = 0;
                }
            }
            
            if (character.on_the_ground and target.y &lt; character.y - 50 and not target.on_the_ground) {
                character.input_action_pressed = true;
            } else {
                character.input_action_pressed = false;
            }
    
            if (character.state == player_is_jumping) {
                character.input_action = true;
                if (target.input_up and target.input_action_pressed) {
                    character.input_action_pressed = true;
                }
            } else {
                character.input_action = false;
            }
        }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset
state = "following";
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
