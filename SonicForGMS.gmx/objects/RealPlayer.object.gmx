<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>GamePlayer</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Command
if (game_is_running()) {
    switch (state) {
    case "normal":
        var channel = input_channel;
        with (character) {
            var input_a = game_input_event("a", channel);
            var input_b = game_input_event("b", channel);
            var input_c = game_input_event("c", channel);

            if (custom_super_input_enabled) {
                var input_a_pressed = game_input_event_pressed("a", channel);
                var input_b_pressed = game_input_event_pressed("b", channel);
                var input_c_pressed = game_input_event_pressed("c", channel);

                input_super = 
                    (input_a and (input_b_pressed or input_c_pressed)) or
                    (input_b and (input_a_pressed or input_c_pressed)) or
                    (input_c and (input_a_pressed or input_b_pressed));
            }
        
            // on-time input
            input_up_pressed = game_input_event_pressed("up", channel);
            input_down_pressed = game_input_event_pressed("down", channel);
            input_left_pressed = game_input_event_pressed("left", channel);
            input_right_pressed = game_input_event_pressed("right", channel);
            input_action_pressed = (input_a or input_b or input_c) and not input_action;

            // continuous input
            input_up = game_input_event("up", channel);
            input_down = game_input_event("down", channel);
            input_left = game_input_event("left", channel);
            input_right = game_input_event("right", channel);
            input_action = input_a or input_b or input_c;
        
            // contradictory input negotiation
            if (input_up and input_down) {
                input_up = false;
                input_down = false;
            }
            if (input_left and input_right) {
                input_left = false;
                input_right = false;
            }
        
            // horizontal axis value
            if (not (input_left or input_right)) {
                horizontal_axis_value = 0;
            } else if (input_left) {
                horizontal_axis_value = -1;
            } else if (input_right) {
                horizontal_axis_value = 1;
            }
        }
        break;

    case "leaving":
        var channel = input_channel;
        with (character) {
            // on-time input
            input_up_pressed = false;
            input_down_pressed = false;
            input_left_pressed = false;
            input_right_pressed = false;
            input_action_pressed = false;
            input_super_override = false;
        
            // continuous input
            input_up = false;
            input_down = false;
            input_left = false;
            input_right = true;
            input_action = false;

            // horizontal axis value
            horizontal_axis_value = 1;
        }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset
state = "normal";
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
