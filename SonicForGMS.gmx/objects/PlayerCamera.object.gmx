<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
image_speed = 0;

owner = noone;

vind = -1;

bound_left = 0;
bound_top = 0;
bound_right = room_width;
bound_bottom = room_height;

x_border = 8;
y_border = 32;
x_speed = 16;
y_speed = 16;
min_y_speed = 6;

look_x_distance = 0;
look_y_distance = 0;
look_distance_up = -110;
look_distance_down = 110;

gravity_direction = 0;

freeze_time = 0;
look_time = 0;
double_tap_up_time = 0;
double_tap_down_time = 0;

default_look_time = 120;
default_double_tap_buffer_time = 32;
default_double_tap_look_time = 8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Count
if (game_is_running()) {
    if (freeze_time &gt; 0) {
        --freeze_time;
    }
    if (look_time &gt; 0) {
        --look_time;
    }
    if (double_tap_up_time &gt; 0) {
        --double_tap_up_time;
    }
    if (double_tap_down_time &gt; 0) {
        --double_tap_down_time;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Detach
if (view_exists(vind)) {
    game_camera_direct(vind, -1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attach
if (view_exists(vind)) {
    game_camera_direct(vind, game_pc_camera_state_normal, self);
    view_centre(vind, x, y);
    bound_left = owner.bound_left;
    bound_top = owner.bound_top;
    bound_right = owner.bound_right;
    bound_bottom = owner.bound_bottom;
    view_xview[vind] = clamp(view_xview[vind], bound_left, bound_right - view_wview[vind]);
    view_yview[vind] = clamp(view_yview[vind], bound_top, bound_bottom - view_hview[vind]);
    view_hborder[vind] = (view_wview[vind] * 0.5) - x_border;
    view_vborder[vind] = (view_hview[vind] * 0.5) - y_border;
    view_hspeed[vind] = x_speed;
    view_vspeed[vind] = y_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
