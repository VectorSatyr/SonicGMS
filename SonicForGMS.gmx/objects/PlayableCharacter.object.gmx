<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize state machine
owner = noone;

state = player_is_ready;
state_previous = -1;
state_changed = false;

spinning = false;
rolling_jump = false;
underwater = false;
superform = false;

jump_action_available = true;

spindash_charge = 0;
spindash_atrophy = 0.96875;

input_up = false;
input_down = false;
input_left = false;
input_right = false;
input_action = false;

input_up_pressed = false;
input_down_pressed = false;
input_left_pressed = false;
input_right_pressed = false;
input_action_pressed = false;

horizontal_axis_value = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize timers
control_lock_time = 0;
remaining_air_time = 0;
recovery_time = 0;
superspeed_time = 0;
invincibility_time = 0;
superform_time = 0;

default_slide_lock_time = 32;
default_spring_lock_time = 16;
default_remaining_air_time = 1800;
default_recovery_time = 120;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize physics
x_int = xstart;
y_int = ystart;

x_speed = 0;
y_speed = 0;

facing_sign = 1;

game_pc_refresh_physics(self);

air_friction_threshold = 0.125;
brake_threshold = 4;
ceiling_land_threshold = -4;
roll_threshold = 1.03125;
unroll_threshold = 0.5;
slide_threshold = 2.5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize collision detection
mask_visible = false;

x_radius = 8;
x_wall_radius = 10;

y_radius = 15;
y_snap_distance = 16;

on_the_ground = true;

wall_id = noone;
wall_sign = 0;

ground_id = noone;
cliff_sign = 0;

ceiling_id = noone;

linked_object_id = noone;

depth_mask = 1;

direction = 0;
gravity_direction = 0;

local_direction = 0;
mask_direction = 0;
angle_resolution = 1.40625;

local_instances = ds_list_create();
local_solids = ds_list_create();

reaction_list = ds_list_create();
previous_reaction_list = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize regions and boundaries
bound_left = 16;
bound_top = 16;
bound_right = room_width - 16;
bound_bottom = room_height - 16;

bound_mask = 0;
bound_ignore_mask = 8;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Iniitalize animation
image_speed = 0;

animations = ds_map_create();
current_animation = "";

image_angle_resolution = 45;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize other values
camera = instance_create(x, y, PlayerCamera);
camera.owner = self;

shader = instance_create(x, y, SuperFormShader);
shader.source = self;

shield = noone;

invincibility_effect = noone;

audio_emitter = audio_emitter_create();
audio_emitter_position(audio_emitter, x, y, 0);
with (GameAudioConfiguration) {
    audio_emitter_gain(other.audio_emitter, volume_sound);
}

var dist = point_distance(0, 0, CAMERA_WIDTH * 0.5, CAMERA_HEIGHT * 0.5);
audio_emitter_falloff(audio_emitter, dist, dist * 1.5, 1);

sounds = ds_map_create();

ring_soundid = RingRightSound;
rev_soundid = -1;
rev_audio_pitch = audio_sound_get_pitch(SpinRevSound);

drowning_music = noone;

chain_multiplier = 0;

stage_end = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize state machine
owner = noone;

state = player_is_ready;
state_previous = -1;
state_changed = false;

spinning = false;
rolling_jump = false;
underwater = false;
superform = false;

jump_action_available = true;

spindash_charge = 0;
spindash_atrophy = 0.96875;

input_up = false;
input_down = false;
input_left = false;
input_right = false;
input_action = false;

input_up_pressed = false;
input_down_pressed = false;
input_left_pressed = false;
input_right_pressed = false;
input_action_pressed = false;

horizontal_axis_value = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup
ds_list_destroy(local_instances);
ds_list_destroy(local_solids);
ds_list_destroy(reaction_list);
ds_list_destroy(previous_reaction_list);
ds_map_destroy(animations);
ds_map_destroy(sounds);
audio_emitter_free(audio_emitter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animate
if (game_is_running()) {
    // bubbles
    if (remaining_air_time &gt; 0) {
        if (remaining_air_time &lt;= 720 and remaining_air_time mod 120 == 0) {
            with (instance_create(x_int + facing_sign * 4, y_int - 2, DrownPopup)) {
                count = other.remaining_air_time div 120;
                vind = other.owner.index;
                if (other.facing_sign == -1) {
                    angle = 180;
                }
            }
        } else if (remaining_air_time mod 60 == 0) {
            with (instance_create(x_int + facing_sign * 4, y_int - 2, Bubble)) {
                size = 1;
                y_speed = -1;
                if (other.facing_sign == -1) {
                    angle = 180;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Count
if (game_is_running()) {
    if (game_zone_time_over() and not instance_exists(ZoneRestart)) {
        game_pc_perform(self, player_is_defeated);
        game_pc_play_sound(self, HurtSound);
    }

    if (on_the_ground and control_lock_time &gt; 0) {
        --control_lock_time;
    }
    if (recovery_time &gt; 0) {
        --recovery_time;
    }

    if (superspeed_time &gt; 0) {
        --superspeed_time;
        if (superspeed_time &lt;= 0) {
            game_pc_refresh_physics(self);
        }
    }

    if (invincibility_time &gt; 0) {
        --invincibility_time;
        if (invincibility_time &lt;= 0) {
            instance_destroy(invincibility_effect);
            invincibility_effect = noone;
            with (shield) {
                visible = true;
            }
        }
    }

    if (remaining_air_time &gt; 0) {
        --remaining_air_time;
        switch (remaining_air_time) {
        case 1500:
        case 1200:
        case 900: // drown warning
            if (owner.index == 0) { // player 1 only
                game_pc_play_sound(self, DrownWarningSound);
            }
            break;

        case 720: // drown music
            if (owner.index == 0) { // player 1 only
                drowning_music = game_audio_enqueue_music(DrowningMusic, 2);
            }
            break;

        case 0: // drown
            if (state != player_is_defeated and state != player_is_drowning) {
                game_pc_perform(self, player_is_drowning);
                game_pc_play_sound(self, DrownSound);
            }
            break;
        }
    }

    if (superform and superform_time &gt; 0) {
        --superform_time;
        if (superform_time &lt;= 0) {
            game_player_change_rings(owner, -1);
            if (owner.rings &gt; 0) {
                superform_time = room_speed;
            } else {
                game_pc_lose_super(self);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Behave
if (game_is_running()) {
    if (script_exists(state)) {
        script_execute(state, "step");
        if (state_changed) {
            state_changed = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw mask
if (mask_visible) {
    if (mask_direction mod 180) {
        draw_rectangle_color(x_int - y_radius, y_int - x_radius, x_int + y_radius, y_int + x_radius, c_lime, c_lime, c_lime, c_lime, true);
        draw_line_color(x_int, y_int - x_wall_radius, x_int, y_int + x_wall_radius, c_white, c_white);
    } else {
        draw_rectangle_color(x_int - x_radius, y_int - y_radius, x_int + x_radius, y_int + y_radius, c_lime, c_lime, c_lime, c_lime, true);
        draw_line_color(x_int - x_wall_radius, y_int, x_int + x_wall_radius, y_int, c_white, c_white);
    }

    var sine = dsin(mask_direction);
    var cosine = dcos(mask_direction);
    draw_line_color(x_int, y_int, x_int + sine * y_radius, y_int + cosine * y_radius, c_white, c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
if (sprite_index &gt; -1) {
    var angle = image_angle;
    var blend = image_blend;
    var alpha = image_alpha;

    // handle angle
    if (angle mod image_angle_resolution != 0) {
        angle = round_to(angle, image_angle_resolution);
    }

    // handle alpha
    if (recovery_time &gt; 0) {
        alpha -= ((recovery_time div 4) mod 2);
    }

    // ready to draw
    draw_sprite_ext(sprite_index, image_index, x_int, y_int, image_xscale * facing_sign, image_yscale, angle, blend, alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
