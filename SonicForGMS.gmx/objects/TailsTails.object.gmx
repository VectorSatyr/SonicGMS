<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>TailsTailsStanceSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>PlayerEffect</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
timeline_set(self, TailsTailsStanceAnim);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animate
if (game_is_running()) {
    visible = true;
    switch (source.current_animation) {
    case "stand":
    case "stance_loop":
    case "brake":
    case "look_up":
    case "crouch":
    case "push":
        timeline_set(self, TailsTailsStanceAnim, 1, true, false);
        break;

    case "spin":
        timeline_set(self, TailsTailsSpinAnim, 1, true, false);
        break;

    case "spindash":
        timeline_set(self, TailsTailsSpinDashAnim, 1, true, false);
        break;

    case "hang":
        if (timeline_index != TailsTailsHangAnim) {
            timeline_index = TailsTailsHangAnim;
            timeline_position = 0;
        }
        break;

    default:
        visible = false;
    }

    if (visible) {
        image_alpha = source.image_alpha;
        if (source.recovery_time &gt; 0) {
            image_alpha -= ((source.recovery_time div 4) mod 2);
        }

        switch (source.current_animation) {
        case "spin":
            if (source.state != player_is_rolling) {
                image_xscale = source.facing_sign;
                if (sign(image_xscale) == 1) {
                    image_angle = point_direction(0, 0, source.x_speed, source.y_speed);
                } else {
                    image_angle = point_direction(source.x_speed, source.y_speed, 0, 0);
                }
            } else {
                if (source.x_speed != 0) {
                    image_xscale = sign(source.x_speed);
                }
                image_angle = source.direction;
            }
            break;

        default:
            image_xscale = source.facing_sign;
            image_angle = source.image_angle;
            break;
        }

        if (image_angle mod source.image_angle_resolution != 0) {
            image_angle = round_to(image_angle, source.image_angle_resolution);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
